//Successor :- small element of right sub tree of that node or exception parent node if node.right==null; and node is smaller that parent;
//Predecessor:- greater element of left sub tree of that  node or ecpetional parent  if node.left==null and  node is greater that parent;
//the above two concept used and solved 

public static Node findSuccessor(Node root)
{
    if(root==null) return null;
    root=root.right;
    while(root!=null && root.left!=null)
    {
        root=root.left;
    }
    return root;
}
public static Node findPredecessor(Node root)
{
    if(root==null) return null;
    root=root.left;
    while(root!=null && root.right!=null)
    {
        root=root.right;
    }
    return root;
}
public static void fastfindPreSuc(Node root,int key)
{
    if(root==null) return;
    if(root.data==key)
    {
        Node p=findPredecessor(root);
        if(p!=null) pre=p;
        Node s=findSuccessor(root);
        if(s!=null) suc=s;
        return;
        
    }
    else if(root.data<key)
    {
        pre=root;
        fastfindPreSuc(root.right,key);
        
    }
    else
    {
        suc=root;
        fastfindPreSuc(root.left,key);
        
    }
        
}
//Function to check whether a Binary Tree is BST or not.
public static void findPreSuc(Node root, int key)
{
    // code here.
    
    /* There are two static nodes defined above pre(representing predecessor) and suc(representing successor) as follows:
       static Node pre=null,suc=null
       You need to update these both.
       And the data inside these classes will be printed automatically by the driver code. 
    */
    fastfindPreSuc(root,key);
}