//Duplicate subtree in Binary Tree
/*
Approach :
Use hashMap and store the value 
every String(root.left)+String(root.data)+String(root.right) is key of hashmap
at last if any key value is >1 return true;
else return false;
Time : O(N) every time goes to first time.  
Space: O(N)
*/

class Solution {
    String fastdupSub(Node root,HashMap<String,Integer>hm)
    {
        if(root==null) return "@";
        if(root.left==null && root.right==null)
        {
            return root.data+"";
        }
        String left=fastdupSub(root.left,hm);
        String right=fastdupSub(root.right,hm);
        String str="";
        str+=root.data;
        str+="'"+left;
        str+="."+right;
        if(hm.containsKey(str))
            hm.put(str,hm.get(str)+1);
        else
            hm.put(str,1);
        return str;
    }
    int dupSub(Node root) {
        // code here
        HashMap<String,Integer> hm=new HashMap<>();
        String s=fastdupSub(root,hm);
        for(Map.Entry<String,Integer> m: hm.entrySet())
        {
            if(m.getValue()>1)  return 1;
        }
        
        return 0;
    }
}