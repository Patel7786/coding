class Solution {
    public boolean isDFSCyclic( ArrayList<ArrayList<Integer>> adj,boolean[] visited,int i,int parent)
    {
       visited[i]=true;
       ArrayList<Integer> list=adj.get(i);
       for(int j=0;j<list.size();j++)
       {
           int val=list.get(j);
           if(!visited[val])
           {
               if(isDFSCyclic(adj,visited,val,i)) return true;
           }
           else if(visited[val] && parent!=val) return true;
       }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited=new boolean[V];
        Arrays.fill(visited,false);
        int parent=-1;
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                boolean ans=isDFSCyclic(adj,visited,i,parent);
                if(ans) 
                {
                    return ans;
                }
            }
        }
         
        return false;
    }
}