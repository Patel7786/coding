//Approach :-
/*
 * it is similear as topologocial sort by BFS 
 * Topological sort applicable only Directed Acyclic graph then provide valid topological sort  means number of vartex== number of element in sort
 * Otherwise provide wring sort it means the number of vertex is greater.
 * if no. of vertex ==no .of element in sort it means no loop otherwise loop.
 */
class Solution {
    // Function to detect cycle in a directed graph.
    
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        int[] indegree=new int[V];
        Arrays.fill(indegree,0);
        for(int i=0;i<V;i++)
        {
            ArrayList<Integer> list=adj.get(i);
            for(int j=0;j<list.size();j++)
            {
                int val=list.get(j);
                indegree[val]++;
            }
        }
        
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<V;i++)
        {
            if(indegree[i]==0)
            {
                q.add(i);
            }
        }
        int count=0;
        while(!q.isEmpty())
        {
            int front=q.remove();
            count++;
            ArrayList<Integer> l=adj.get(front);
            for(int p=0;p<l.size();p++)
            {
                indegree[l.get(p)]--;
                if(indegree[l.get(p)]==0)
                {
                    q.add(l.get(p));
                }
            }
        }
        if(count ==V ) return false;
        return true;
        
    }
}