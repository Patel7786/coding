class Solution
{
    public void DFS(ArrayList<ArrayList<Integer>> adj,int s,int d,int ans[])
    {
        if(s==d)
        {
            ans[0]++;
            return;
        }
        else
        {
            ArrayList<Integer> list=adj.get(s);
            for(int i=0;i<list.size();i++)
            {
                DFS(adj,list.get(i),d,ans);
            }
        }
        
    }
   
    public int possible_paths(int[][] edges, int n, int s, int d)
    {
        // Code here 
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<edges.length;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adj.get(u).add(v);
        }
        int ans[]=new int[1];
        DFS(adj,s,d,ans);
        
        return ans[0];
    }
}