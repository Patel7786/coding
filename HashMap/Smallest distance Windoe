//Very Very Very Important Question and also very logical
//Concept:
//grow and shrink logic i : for shrink j: for growning.
//first grow then shrink and check minimum smallest window 
class Solution {
    public int findSubString( String str) {
        // Your code goes here
       
        HashMap<Character,Integer> hm=new HashMap<>();
        HashSet<Character> set=new HashSet<>();
        for(int i=0;i<str.length();i++)
        {
            set.add(str.charAt(i));
        }
        int key=set.size();
        int count=0;
        int i=0;
        int j=1;
        hm.put(str.charAt(i),1);
        count++;
        int min=Integer.MAX_VALUE;
       while(i<=j && j<str.length())
       {
           
           if(count<key)
           {
               if(hm.containsKey(str.charAt(j)) && hm.get(str.charAt(j))>0)
                {
                    hm.put(str.charAt(j),hm.get(str.charAt(j))+1);
                }
                else
                {
                    hm.put(str.charAt(j),1);
                    count++;
                }
               j++;
           }
           else if(count==key)
           {
               min=Math.min(min,j-i);
               if(hm.get(str.charAt(i))==1)
               {
                  count--;
               }
               hm.put(str.charAt(i),hm.get(str.charAt(i))-1);
               i++;
           }
       }
        while(count==key)
           {
               min=Math.min(min,j-i);
               if(hm.get(str.charAt(i))==1)
               {
                  count--;
               }
               hm.put(str.charAt(i),hm.get(str.charAt(i))-1);
               i++;
           }
        return min;
    }
    
}