//TIme complexity O(logN);

class GFG
{
    int LastOccurance(int arr[],int n,int x)
    {
        int start=0;
        int end=n-1;
        int ans=-1;
        while(start<=end)
        {
            int  mid= (end-start)/2 +start;
            if(arr[mid]>x)
            {
                end=mid-1;
            }
            else if(arr[mid]<x)
                start=mid+1;
            else
            {
                ans=mid;
                start=mid+1;
            }
        }
        return ans;
    }
    int firstOccurance(int arr[],int n,int x)
    {
        int start=0;
        int end=n-1;
        int ans=-1;
        while(start<=end)
        {
            int  mid= (end-start)/2 +start;
            if(arr[mid]>x)
            {
                end=mid-1;
            }
            else if(arr[mid]<x)
                start=mid+1;
            else
            {
                ans=mid;
                end=mid-1;
            }
        }
        return ans;
    }
    ArrayList<Integer> find(int arr[], int n, int x)
    {
        // code herendfebkj
        
        ArrayList<Integer> l=new ArrayList<>();
        l.add(firstOccurance(arr,n,x));
        l.add(LastOccurance(arr,n,x));
        return l;
    }
}