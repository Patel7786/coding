/*
Given a non-negative integer S represented as a string, remove K digits from the number so that the new number is the smallest possible.
Note : The given num does not contain any leading zero.
*/
/*
 * Approach
 * every time check the value of string[i]< stack.peek() then pop 
 * concept is: to pop those element from where we got the declination .
 */
class Solution {
    
    
    public String removeKdigits(String S, int K) {
        // code here
       
        int len=S.length();
        Stack<Character> stack=new Stack<>();
        int count=0;
        for(int i=0;i<len;i++)
        {
            char val=S.charAt(i);
            while(!stack.empty() && stack.peek()>val && K>0)
            {
                stack.pop();
                K--;
            }
            if(!stack.empty() || val!='0')
                stack.push(val);
            
        }
       
       while(!stack.empty() && K>0)
       {
            stack.pop();
            K--;
       }
      
        StringBuilder ans=new StringBuilder("");
        while(!stack.empty())
        {
            ans=ans.append(stack.pop());
        }
        String a=ans.reverse().toString();
        
        if(a.length()==0) return "0";
        return a;
        
    }
}