//Max Sum without Adjacents
//using DP it solved 
//first Approach: time complexity: O(N) space : O(N)+O(N)=O(N)
class Solution {
    int findsum(int arr[],int i,int n,int dp[])
    {
        if(i>=n) return 0; //base case
        if(dp[i]!=-1) return dp[i];
        int include=findsum(arr,i+2,n,dp)+arr[i];
        int exclude=findsum(arr,i+1,n,dp);
        dp[i]= Math.max(include,exclude);//memoizatrion
        return dp[i];
    }
    int findMaxSum(int arr[], int n) {
        // code here
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
      return(findsum(arr,0,n,dp));
    }
}

//Second Approach:

class Solution {
     
    int findMaxSum(int arr[], int n) {
        // code here
        int dp[]=new int[n];
        Arrays.fill(dp,0);
        dp[0]=arr[0];
     for(int i=1;i<n;i++)
     {
         int en=0;
         if(i<2)
         {
             en=0+arr[i];
         }
         else
            en=dp[i-2]+arr[i];
         int ex=dp[i-1];
         dp[i]=Math.max(en,ex);
     }
        return dp[n-1];
    }
}
//third Approach :
class Solution {
     
    int findMaxSum(int arr[], int n) {
        // code here
        int prev1=arr[0];
        int prev2=0;
     for(int i=1;i<n;i++)
     {
         int  en=prev2+arr[i];
         int ex=prev1;
         prev2=prev1;
         prev1=Math.max(en,ex);
     }
        return prev1;
    }
}